<application>
  <component name="LanguageInjectionConfiguration">
    <injection language="TSQL" injector-id="js">
      <display-name>Transact-SQL declare</display-name>
      <place disabled="true"><![CDATA[jsLiteral().withStringValue(string().matchesBrics(" *DECLARE +\\@.*"))]]></place>
    </injection>
    <injection language="PostgreSQL" injector-id="sql" pattern="(?i)regclass" fragment="SQL_TABLE_REFERENCE" hosts="PostgreSQL">
      <display-name>(?i)regclass</display-name>
    </injection>
    <injection language="PostgreSQL" injector-id="sql" pattern="(?i)regconfig" fragment="SQL_REFERENCE" hosts="PostgreSQL">
      <display-name>(?i)regconfig</display-name>
    </injection>
    <injection language="PostgreSQL" injector-id="sql" pattern="(?i)regdictionary" fragment="SQL_REFERENCE" hosts="PostgreSQL">
      <display-name>(?i)regdictionary</display-name>
    </injection>
    <injection language="PostgreSQL" injector-id="sql" pattern="(?i)regnamespace" fragment="SQL_SCHEMA_REFERENCE" hosts="PostgreSQL">
      <display-name>(?i)regnamespace</display-name>
    </injection>
    <injection language="PostgreSQL" injector-id="sql" pattern="(?i)regoper" fragment="SQL_OPERATOR_REFERENCE" hosts="PostgreSQL">
      <display-name>(?i)regoper</display-name>
    </injection>
    <injection language="PostgreSQL" injector-id="sql" pattern="(?i)regoperator" fragment="SQL_OPERATOR_SIGNATURE" hosts="PostgreSQL">
      <display-name>(?i)regoperator</display-name>
    </injection>
    <injection language="PostgreSQL" injector-id="sql" pattern="(?i)regproc" fragment="SQL_FUNCTION_REFERENCE" hosts="PostgreSQL">
      <display-name>(?i)regproc</display-name>
    </injection>
    <injection language="PostgreSQL" injector-id="sql" pattern="(?i)regprocedure" fragment="SQL_FUNCTION_SIGNATURE" hosts="PostgreSQL">
      <display-name>(?i)regprocedure</display-name>
    </injection>
    <injection language="PostgreSQL" injector-id="sql" pattern="(?i)regrole" fragment="SQL_ROLE_REFERENCE" hosts="PostgreSQL">
      <display-name>(?i)regrole</display-name>
    </injection>
    <injection language="PostgreSQL" injector-id="sql" pattern="(?i)regtype" fragment="SQL_TYPE_ELEMENT" hosts="PostgreSQL">
      <display-name>(?i)regtype</display-name>
    </injection>
    <injection language="XPath2" injector-id="sql">
      <display-name>Derby XPath</display-name>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Derby").functionArgument(0, sqlFunctionCall().name("xmlexists", "xmlquery").params(sqlExpressions().count(2)))]]></place>
    </injection>
    <injection language="XPath2" injector-id="sql">
      <display-name>MySQL XPath</display-name>
      <place disabled="true"><![CDATA[sqlElement().forDialects("MySQL").functionArgument(1, sqlFunctionCall().name("ExtractValue").params(sqlExpressions().count(2)))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("MySQL").functionArgument(1, sqlFunctionCall().name("UpdateXML").params(sqlExpressions().count(3)))]]></place>
    </injection>
    <injection language="XPath2" injector-id="sql">
      <display-name>Oracle XPath</display-name>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(0, sqlFunctionCall().name("xmlquery", "xmlexists"))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(0, sqlFunctionCall().name("xmltable"))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, -2, 2, sqlFunctionCall().name("updatexml"))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("appendchildxml", "insertxmlafter", "insertxmlbefore").params(sqlExpressions().count(3, 4)))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("extract", "extractvalue", "deletexml", "existsnode").params(sqlExpressions().count(2, 3)))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Oracle").functionArgument(1, sqlFunctionCall().name("insertchildxml", "insertchildxmlafter", "insertchildxmlbefore").params(sqlExpressions().count(4, 5)))]]></place>
    </injection>
    <injection language="XPath2" injector-id="sql">
      <display-name>PostgreSQL XPath</display-name>
      <place disabled="true"><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(0, sqlFunctionCall().name("xmlexists", "xmltable").params(sqlExpressions().count(2)))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(0, sqlFunctionCall().name("xpath", "xpath_exists").params(sqlExpressions().count(2, 3)))]]></place>
    </injection>
    <injection language="PostgreSQL" injector-id="sql">
      <display-name>PostgreSQL dblink</display-name>
      <place disabled="true"><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(0, sqlFunctionCall().name("dblink", "dblink_exec").params(sqlExpressions().count(1, 2).atOpt(1, sqlExpression().withType("boolean"))))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(1, sqlFunctionCall().name("dblink", "dblink_exec").params(sqlExpressions().count(2, 3)))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(1, sqlFunctionCall().name("dblink_open").params(sqlExpressions().count(2, 3).atOpt(2, sqlExpression().withType("boolean"))))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(1, sqlFunctionCall().name("dblink_send_query").params(sqlExpressions().count(2)))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("PostgreSQL").functionArgument(2, sqlFunctionCall().name("dblink_open").params(sqlExpressions().count(3, 4)))]]></place>
    </injection>
    <injection language="XPath2" injector-id="sql">
      <display-name>SQL Server XPath</display-name>
      <place disabled="true"><![CDATA[sqlElement().forDialects("TSQL").functionArgument(0, sqlFunctionCall().name("nodes", "exist", "query").qualifier(sqlExpression().withType("xml")).params(sqlExpressions().count(1)))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("TSQL").functionArgument(0, sqlFunctionCall().name("value").qualifier(sqlExpression().withType("xml")).params(sqlExpressions().count(2)))]]></place>
    </injection>
    <injection language="XPath2" injector-id="sql">
      <display-name>Sybase XPath</display-name>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Sybase").binaryExpressionArgument(0, sqlBinaryExpression().operation(leafTokens("xmltest").or("not", "xmltest")))]]></place>
      <place disabled="true"><![CDATA[sqlElement().forDialects("Sybase").functionArgument(0, sqlFunctionCall().name("xmlextract"))]]></place>
    </injection>
  </component>
</application>